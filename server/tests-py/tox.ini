[tox]
envlist = 
   pgDocker11.3-hgeStackExec-noAuth-default
skipsdist = true
# Required to load hooks defined in toxhooks.py file
requires = tox-local-hooks

[testenv]
deps = -rrequirements.txt
passenv =
  HASURA_TEST_OUTPUT_FOLDER
  HASURA_TEST_INFO_DB
  HASURA_TEST_LOGLEVEL
  pgUrl:        HASURA_TEST_PG_URLS
  pgDocker:     HASURA_TEST_PG_DOCKER_IMAGE
  hgeDocker:    HASURA_TEST_HGE_DOCKER_IMAGE
  hgeExec:      HASURA_TEST_GRAPHQL_ENGINE
  hgeStackExec: HOME
setenv =
#These configurations ensure that errors are thrown if the corresponding environmental variables are not defined
  pgUrl:     HASURA_TEST_PG_URLS          = {env:HASURA_TEST_PG_URLS}
  pgDocker:  HASURA_TEST_PG_DOCKER_IMAGE  = {env:HASURA_TEST_PG_DOCKER_IMAGE}
  hgeDocker: HASURA_TEST_HGE_DOCKER_IMAGE = {env:HASURA_TEST_HGE_DOCKER_IMAGE}
  hgeExec:   HASURA_TEST_GRAPHQL_ENGINE   = {env:HASURA_TEST_GRAPHQL_ENGINE}
commands =
  python3 run_pytest_scenario.py -- {posargs}
envdir =
  # .tox environment is for installing tox and its dependencies.
  # Having same directory for tests and tox installation can result in errors
  !.tox: {toxworkdir}/pytest
  .tox: {toxworkdir}/.tox
#The options below work in tandem with the hooks defined in the file toxhooks.py. Go through the code for details.
pgdockerimage =
  #%s denotes the full postgres version
  pgDocker11.{1,2,3,4}: circleci/postgres:%s-alpine-postgis
  pgDocker10.{1,2,3,4,5,6,7,8,9}: circleci/postgres:%s-alpine-postgis
  pgDocker9.6.{4,5,6,7,8,9,10,11,12,13,14}: circleci/postgres:%s-alpine-postgis
hgebetadockerimage =
  #%s denotes the beta version
  hgeDockerBeta{1,2,3,4,5,6,7,8,9}: hasura/graphql-engine:v1.0.0-beta.%s
scenario = 
  #%s denotes the name of the scenario
  websocketReadCookieCors{Disabled,Enabled}: %s
  websocketNoReadCookieCorsDisabled: %s
  {metadata,graphql}ApiDisabled{Env,Arg}: %s
  allowListEnabled{Env,Arg}: %s
  insecure{Get,Post}Webhook: %s
  jwt{Stringified,WithIssuer}: %s
  jwtWithAudience{,List}: %s
  corsDomains: %s
  queryLogs: %s
  horizontalScaling: %s
  default: %s
auth =
  #Yaml configurations for auth to be used with the tests
  #If there is an auth configuration defined by test scenario, that configuration takes precedence
  noAuth:          noAuth
  adminSecretAuth: adminSecret
  getWebhookAuth:  webhook : \{ mode : get \}
  postWebhookAuth: webhook : \{ mode : post \}
  jwtAuth:         jwt
