# content of: tox.ini , put in same dir as setup.py
[tox]
envlist = 
   pgDocker11.3-hgeStackExec-noAuth-default
skipsdist = true

[testenv]
deps = pipenv
passenv =
  HASURA_TEST_OUTPUT_FOLDER
  HASURA_TEST_INFO_DB
  pgUrl: 	HASURA_TEST_PG_URLS 
  pgDocker: 	HASURA_TEST_PG_DOCKER_IMAGE
  hgeDocker: 	HASURA_TEST_HGE_DOCKER_IMAGE
  hgeExec:      HASURA_TEST_GRAPHQL_ENGINE
  hgeStackExec:	HOME
setenv =
  PIPENV_VERBOSITY=-1
#Postgres
  pgUrl:        HASURA_TEST_PG_URLS={env:HASURA_TEST_PG_URLS}
  pgDocker:     HASURA_TEST_PG_DOCKER_IMAGE={env:HASURA_TEST_PG_DOCKER_IMAGE}
  pgDocker11.3: HASURA_TEST_PG_DOCKER_IMAGE=circleci/postgres:11.3-alpine-postgis
  pgDocker10.8: HASURA_TEST_PG_DOCKER_IMAGE=circleci/postgres:10.8-alpine-postgis
  pgDocker9.6:  HASURA_TEST_PG_DOCKER_IMAGE=circleci/postgres:9.6.13-alpine-postgis
#GraphQL engine
  hgeDocker: HASURA_TEST_HGE_DOCKER_IMAGE={env:HASURA_TEST_HGE_DOCKER_IMAGE}
  hgeExec:   HASURA_TEST_GRAPHQL_ENGINE={env:HASURA_TEST_GRAPHQL_ENGINE}
#scenarios
  default: 			     HASURA_TEST_SCENARIO=default
  websocketReadCookieCorsDisabled:   HASURA_TEST_SCENARIO=websocketReadCookieCorsDisabled
  websocketNoReadCookieCorsDisabled: HASURA_TEST_SCENARIO=websocketNoReadCookieCorsDisabled
  websocketReadCookieCorsEnabled:    HASURA_TEST_SCENARIO=websocketReadCookieCorsEnabled
  corsDomains:			     HASURA_TEST_SCENARIO=corsDomains
  graphqlApiDisabled:		     HASURA_TEST_SCENARIO=graphqlApiDisabled
  metadataApiDisabled:		     HASURA_TEST_SCENARIO=metadataApiDisabled
  horizontalScaling: 		     HASURA_TEST_SCENARIO=horizontalScaling
  insecureGetWebhook: 		     HASURA_TEST_SCENARIO=insecureGetWebhook
  insecurePostWebhook: 		     HASURA_TEST_SCENARIO=insecurePostWebhook
  logging:                           HASURA_TEST_SCENARIO=logging
#auths
  noAuth:          HASURA_TEST_AUTH = noAuth
  adminSecret: 	   HASURA_TEST_AUTH = adminSecret
  getWebhookAuth:  HASURA_TEST_AUTH = "\{ webhook : \{ mode : get \} \}"
  postWebhookAuth: HASURA_TEST_AUTH = "\{ webhook : \{ mode : post \} \}"
  jwtAuth:         HASURA_TEST_AUTH =jwt
commands =
  ./tox_setup_pipenv.sh
  python3 -m pipenv run python3 run_pytest_scenario.py -- {posargs}
envdir = {toxworkdir}/pytest

